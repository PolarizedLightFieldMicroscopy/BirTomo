{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww17860\viewh13060\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf2 Jones Calculus configured for high sampling rate: voxNr = 1; nrCamPix = 16; camPixPitch = 6.5; rNA = 7.5 ;  and for 20x/0.4NA objective\
Single voxel birefringence = ??, voxPitch = 5.2 \'b5m\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf2 14 Feb. 2025:\

\f0\b0 high sampling rate: voxNr = 1; nrCamPix = 16; camPixPitch = 6.5; rNA = 7.5 ;  and for 20x/0.4NA objective\
Maximum retardance 1.16 radian\
In Mathematica, before saving a TIFF file of the slow axis orientations or azimuth values for use with PolScope graphics functions in ImageJ, the azimuth values need to be subtracted from Pi or 3.1416 to conform to the conventions in OpenPolScope graphics. Those transformed values generate the correct line orientations when using the "Display  azim lines" macro in ImageJ.\
\
Spicule1248Feb12_RevZ-h5_Feb17LFRet.tif; Spicule1248Feb12_RevZ-h5_Feb17LFAzim.tif\
\
In ImageJ, before converting to an 8-bit PolStack, the pixel values of the retardance image are multiplied by a factor that is equal to 255 divided by the retardance ceiling value, e.g 1.2 radian.  The pixel values in the azimuth image, given in radian, are multiplied by 180 divided by Pi, or 3,1416, to convert the azimuth angles to degree.     -> 255/1.2=212.5;  180/3.1416=57.3;\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf2 12 Dec. 2024:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf2 high sampling rate: voxNr = 1; nrCamPix = 16; camPixPitch = 6.5; rNA = 7.5 ;  and for 20x/0.4NA objective\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 Maximum retardance 1.16 radian\
For converting to 16bit retardance values, I make 1.2 radian to 2^16 - 1 =  65535, hence, multiply retardance in radian with 65535/1.5 = 43690\
For converting to 16bit azimuth values, I make Pi radian to 18000, hence, multiply azimuth in radian with 18000/3.14159 = 5730\
LFStacks have 16bit retardance and azimuth slice which can be used to overlay azimuth lines using ImageJ plugin\
\
SpiculeADec12_RevZ-h5_LFRet.tif; SpiculeADec12_RevZ-h5_LFAzim.tif; \
Both computed light field images were horizontally flipped and combined to make SpiculeADec12_RevZ-h5_LFStack.tif\
\
Alternatively, load volume data from Spicule1248Nov13_RevZ.h5, as described in SubSection "Importing for further processing with Mathematica code", then generate light field images:\
-> Spicule1248Nov13_RevZ.h5_LFRet.tif; Spicule1248Nov13_RevZ.h5_LFAzim.tif; \
}